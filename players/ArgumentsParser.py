#!/usr/bin/env python3
# -*- coding: utf-8 -*-
####################################################################################################################################################################################################################################
############################################################################################################## LICENSE #############################################################################################################
####################################################################################################################################################################################################################################
#
#    Copyright © 2016 Bastien Pasdeloup (name.surname@gmail.com) and Télécom Bretagne
#
#    This file is part of PyRat.
#
#    PyRat is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    PyRat is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with PyRat.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################################################################################################################################################
############################################################################################################## IMPORTS #############################################################################################################
####################################################################################################################################################################################################################################

### EXTERNAL ###
import sys

####################################################################################################################################################################################################################################
############################################################################################################### CLASS ##############################################################################################################
####################################################################################################################################################################################################################################

class ArgumentsParser :
    
    ############################################################################################################################################################################################################################
    ####################################################################################################### CONSTRUCTORS #######################################################################################################
    ############################################################################################################################################################################################################################
        
        ### DOCUMENTATION ###
        # Default constructor
        
        ### CODE ###
        def __init__ (self) :
            
            pass
        
    ############################################################################################################################################################################################################################
    ######################################################################################################## DESTRUCTOR ########################################################################################################
    ############################################################################################################################################################################################################################
        
        ### DOCUMENTATION ###
        # Default destructor
        
        ### CODE ###
        def __del__ (self) :
            
            pass
        
    ############################################################################################################################################################################################################################
    ########################################################################################################## METHODS #########################################################################################################
    ############################################################################################################################################################################################################################
        
        ### DOCUMENTATION ###
        # Checks the command line for the expected arguments
        # Returns a dictionary with keys as given in the arguments lists
        # Non-given optional arguments will be initialized with a None value
        
        ### CODE ###
        def argumentsToMap (self, compulsoryArguments, optionalArguments) :
            
            # We iterate over the list to find the arguments
            result = {}
            for i in range(1, len(sys.argv) - 1, 2) :
                key = sys.argv[i]
                value = sys.argv[i + 1]
                if key in result.keys() :
                    print("<b><font color=\"orange\">[WARNING]</font></b> Multiple instances of argument " + key)
                if key in compulsoryArguments or key in optionalArguments :
                    result[key] = value

            # We check that all compulsory arguments have been set
            for key in compulsoryArguments :
                if key not in result.keys() :
                    raise Exception("Argument " + key + " is not set")
            
            # Default values for optional arguments
            for key in optionalArguments :
                if key not in result.keys() :
                    result[key] = None
            
            # Done
            return result
        
    ############################################################################################################################################################################################################################
    ############################################################################################################################################################################################################################

####################################################################################################################################################################################################################################
####################################################################################################################################################################################################################################