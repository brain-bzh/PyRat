#!/usr/bin/env python3
# -*- coding: utf-8 -*-
####################################################################################################################################################################################################################################
############################################################################################################## LICENSE #############################################################################################################
####################################################################################################################################################################################################################################
#
#    Copyright © 2016 Bastien Pasdeloup (name.surname@gmail.com) and Télécom Bretagne
#
#    This file is part of PyRat.
#
#    PyRat is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    PyRat is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with PyRat.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################################################################################################################################################
############################################################################################################## IMPORTS #############################################################################################################
####################################################################################################################################################################################################################################

### EXTERNAL ###
import ast
import socket
import string
import sys
import time

### INTERNAL ###
import ArgumentsParser
import TypeConverter

####################################################################################################################################################################################################################################
############################################################################################################### CLASS ##############################################################################################################
####################################################################################################################################################################################################################################

class NetworkClient :
    
    ############################################################################################################################################################################################################################
    ######################################################################################################### CONSTANTS ########################################################################################################
    ############################################################################################################################################################################################################################
        
        ### DOCUMENTATION ###
        # Char used to indicate the end of a message
        
        ### CODE ###
        MESSAGE_DELIMITER = '\n';
        
    ############################################################################################################################################################################################################################
    
        ### DOCUMENTATION ###
        # Size of the buffer when reading from the socket
        
        ### CODE ###
        READ_MAX_SIZE = 2048

    ############################################################################################################################################################################################################################
    
        ### DOCUMENTATION ###
        # Number of seconds sleeping before trying to connect again to the server

        ### CODE ###
        SECONDS_BEFORE_RETRY = 0.05
    
    ############################################################################################################################################################################################################################
    ####################################################################################################### CONSTRUCTORS #######################################################################################################
    ############################################################################################################################################################################################################################
        
        ### DOCUMENTATION ###
        # Saves the IP and port in attributes for a later connection
        
        ### CODE ###
        def __init__ (self) :
            
            # Attributes given by the launcher
            parser = ArgumentsParser.ArgumentsParser()
            arguments = parser.argumentsToMap(["-ip", "-port"], [])
            converter = TypeConverter.TypeConverter()
            ip = converter.toIP(arguments["-ip"])
            port = converter.toPort(arguments["-port"])
            
            # Connection parameters
            self.serverAddress = ip
            self.serverPort = port
            self.socket = None
        
    ############################################################################################################################################################################################################################
    ######################################################################################################## DESTRUCTOR ########################################################################################################
    ############################################################################################################################################################################################################################
        
        ### DOCUMENTATION ###
        # Properly closes the socket when the program terminates
        
        ### CODE ###
        def __del__ (self) :
            
            # We close the socket
            if self.socket is not None :
                self.socket.close()
        
    ############################################################################################################################################################################################################################
    ########################################################################################################## METHODS #########################################################################################################
    ############################################################################################################################################################################################################################
        
        ### DOCUMENTATION ###
        # Tries connecting to the server until it becomes available
        
        ### CODE ###
        def establishConnection (self) :
            
            # We create a socket and connect to the server
            print("<b><font color=\"green\">[INFO]</font></b> Connecting to PyRat core")
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            while True :
                try :
                    self.socket.connect((self.serverAddress, self.serverPort))
                    break
                except :
                    time.sleep(NetworkClient.SECONDS_BEFORE_RETRY)
            print("<b><font color=\"green\">[INFO]</font></b> Connection successful")
        
    ############################################################################################################################################################################################################################
    
        ### DOCUMENTATION ###
        # Disconnects from the core
        # Useful to notify the core that an error occurred
        
        ### CODE ###
        def disconnect (self) :
            
            # We close the socket
            if self.socket :
                self.socket.close()
        
    ############################################################################################################################################################################################################################
    
        ### DOCUMENTATION ###
        # Receives the available message sent by the server
        
        ### CODE ###
        def receiveMessage (self) :
            
            # We read until we have the whole message
            message = ""
            while len(message) == 0 or message[-1] != NetworkClient.MESSAGE_DELIMITER :
                message += self.socket.recv(NetworkClient.READ_MAX_SIZE).decode()
            
            # We return the message
            message = "".join(filter(lambda character : character in string.printable, message))
            return message
        
    ############################################################################################################################################################################################################################
    
        ### DOCUMENTATION ###
        # Sends a message to the server
        
        ### CODE ###
        def sendMessage (self, message) :
            
            # We add a delimiter to the end of the string
            message += NetworkClient.MESSAGE_DELIMITER
            
            # We send the message through the socket
            result = self.socket.send(message.encode())
            if result == 0:
                raise Exception("Error sending message to the server")
        
    ############################################################################################################################################################################################################################
    ############################################################################################################################################################################################################################

####################################################################################################################################################################################################################################
####################################################################################################################################################################################################################################