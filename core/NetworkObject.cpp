/**********************************************************************************************************************************************************************************************************************************/
/************************************************************************************************************* LICENSE ************************************************************************************************************/
/**********************************************************************************************************************************************************************************************************************************/
//
//    Copyright © 2016 Bastien Pasdeloup (name.surname@gmail.com) and Télécom Bretagne
//
//    This file is part of PyRat.
//
//    PyRat is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    PyRat is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with PyRat.  If not, see <http://www.gnu.org/licenses/>.
//
/**********************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************** INCLUDES & NAMESPACES *****************************************************************************************************/
/**********************************************************************************************************************************************************************************************************************************/

    /** EXTERNAL **/
    #include <arpa/inet.h>
    #include <fcntl.h>
    #include <ifaddrs.h>
    #include <string>
    #include <sys/ioctl.h>
    #include <unistd.h>

    /** INTERNAL **/
    #include <Shell.cpp>
    #include <ToString.cpp>
    
    /** NAMESPACES **/
    using namespace std;

/**********************************************************************************************************************************************************************************************************************************/
/************************************************************************************************************** CLASS *************************************************************************************************************/
/**********************************************************************************************************************************************************************************************************************************/
    
    #ifndef _NETWORK_OBJECT_
    #define _NETWORK_OBJECT_
        
        class NetworkObject
        {
            
            /**********************************************************************************************************************************************************************************************************/
            /************************************************************************************************ CONSTANTS ***********************************************************************************************/
            /**********************************************************************************************************************************************************************************************************/
            
                /** DOCUMENTATION **/
                // Char used to indicate the end of a message
                
                /** CODE **/
                public : const char MESSAGE_DELIMITER = '\n';
                
            /**********************************************************************************************************************************************************************************************************/
            
                /** DOCUMENTATION **/
                // Buffer size when reading until we find a full line
                
                /** CODE **/
                private : const int READ_MAX_SIZE = 2048;
                
            /**********************************************************************************************************************************************************************************************************/
            
                /** DOCUMENTATION **/
                // Time after which the distant object is considered lost
                
                /** CODE **/
                protected : const int START_CONNECTION_TIMEOUT = 20;
                
            /**********************************************************************************************************************************************************************************************************/
            /*********************************************************************************************** ATTRIBUTES ***********************************************************************************************/
            /**********************************************************************************************************************************************************************************************************/
            
                /** DOCUMENTATION **/
                // IP address for the connection
                
                /** CODE **/
                protected : string _address;
                
            /**********************************************************************************************************************************************************************************************************/
            
                /** DOCUMENTATION **/
                // Indicates if the distant element is connected
                
                /** CODE **/
                protected : bool _connected = false;
                
            /**********************************************************************************************************************************************************************************************************/
            
                /** DOCUMENTATION **/
                // port for the connection
                
                /** CODE **/
                protected : int _port;
                
            /**********************************************************************************************************************************************************************************************************/
            
                /** DOCUMENTATION **/
                // TCP connection socket
                
                /** CODE **/
                protected : int _socket;
                
            /**********************************************************************************************************************************************************************************************************/
            /********************************************************************************************** CONSTRUCTORS **********************************************************************************************/
            /**********************************************************************************************************************************************************************************************************/
            
                /** DOCUMENTATION **/
                // Constructor with the IP address and port
                
                /** CODE **/
                protected : NetworkObject (string address, int port) : _address(address), _port(port)
                {}
            
            /**********************************************************************************************************************************************************************************************************/
            /*********************************************************************************************** DESTRUCTOR ***********************************************************************************************/
            /**********************************************************************************************************************************************************************************************************/
                
                /** DOCUMENTATION **/
                // Closes the socket at the end
                
                /** CODE **/
                protected : virtual ~NetworkObject ()
                {
                    
                    // We close the socket
                    close(_socket);
                    
                }
                
            /**********************************************************************************************************************************************************************************************************/
            /************************************************************************************************* METHODS ************************************************************************************************/
            /**********************************************************************************************************************************************************************************************************/
                
                /** DOCUMENTATION **/
                // Virtual method to overload to establish the connection to a distant element
                
                /** CODE **/
                public : virtual void establishConnection ()
                = 0;
                
            /**********************************************************************************************************************************************************************************************************/
            
                /** DOCUMENTATION **/
                // Getter for the connection flag
                
                /** CODE **/
                public : bool isConnected ()
                {
                    
                    // We return the connected attribute
                    return _connected;
                    
                }
                
            /**********************************************************************************************************************************************************************************************************/
                
                /** DOCUMENTATION **/
                // sends a message through the socket
                
                /** CODE **/
                protected : void sendMessage (string message)
                {
                    
                    // Only if connected
                    if (_connected)
                    {
                        
                        // We add a delimiter to the end of the message
                        message += MESSAGE_DELIMITER;

                        // We send a message through the socket
                        int result = write(_socket, message.c_str(), message.size());
                        if (result < 0)
                        {
                            Shell::getInstance().warning("Error writing to the socket at " + _address + ":" + to_string(_port));
                            _connected = false;
                        }
                    
                    }
                    
                }
                
            /**********************************************************************************************************************************************************************************************************/
                
                /** DOCUMENTATION **/
                // Receives a message from the socket
                
                /** CODE **/
                protected : string receiveMessage (bool blocking)
                {

                    // Only if connected
                    if (_connected)
                    {

                        // We set the socket in blocking or non-blocking mode
                        int socketOptions = fcntl(_socket, F_GETFL);
                        if (blocking)
                            socketOptions = socketOptions & (~O_NONBLOCK);
                        else
                            socketOptions = socketOptions | O_NONBLOCK;
                        fcntl(_socket, F_SETFL, socketOptions);

                        // We receive a message through the socket
                        // Positive read is a normal message
                        // Null read is a disconnection from the client
                        // Negative read indicates nothing was available (may only happen in non-blocking mode)
                        string message = "";
                        int result;
                        char buffer[READ_MAX_SIZE + 1];
                        while (message.size() == 0 || message.back() != MESSAGE_DELIMITER)
                        {
                            memset(buffer, READ_MAX_SIZE + 1, 0);
                            result = read(_socket, buffer, READ_MAX_SIZE);
                            if (result == 0)
                            {
                                Shell::getInstance().warning("Error reading from the socket at " + _address + ":" + to_string(_port));
                                _connected = false;
                                break;
                            }
                            else if (result > 0)
                                message += string(buffer, result);
                            else
                                break;
                        }

                        // We return the message
                        string editedMessage = "";
                        for (auto& messageChar : message)
                            if (isprint(messageChar))
                                editedMessage += messageChar;
                        return editedMessage;

                    }
                    
                    // Default
                    return "";
                    
                }
                
            /**********************************************************************************************************************************************************************************************************/
            /**********************************************************************************************************************************************************************************************************/
            
        };
        
    #endif

/**********************************************************************************************************************************************************************************************************************************/
/**********************************************************************************************************************************************************************************************************************************/
