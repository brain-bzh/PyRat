/**********************************************************************************************************************************************************************************************************************************/
/************************************************************************************************************* LICENSE ************************************************************************************************************/
/**********************************************************************************************************************************************************************************************************************************/
//
//    Copyright © 2016 Bastien Pasdeloup (name.surname@gmail.com) and Télécom Bretagne
//
//    This file is part of PyRat.
//
//    PyRat is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    PyRat is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with PyRat.  If not, see <http://www.gnu.org/licenses/>.
//
/**********************************************************************************************************************************************************************************************************************************/
/****************************************************************************************************** INCLUDES & NAMESPACES *****************************************************************************************************/
/**********************************************************************************************************************************************************************************************************************************/

    /** EXTERNAL **/
    #include <string>
    #include <vector>
    
    /** INTERNAL **/
    #include <NetworkClient.cpp>
    #include <Player.cpp>
    #include <Shell.cpp>
    #include <ToString.cpp>
    #include <TypeConverter.cpp>
    #include <Maze.cpp>
    
    /** NAMESPACES **/
    using namespace std;

/**********************************************************************************************************************************************************************************************************************************/
/************************************************************************************************************** CLASS *************************************************************************************************************/
/**********************************************************************************************************************************************************************************************************************************/
    
    #ifndef _GUI_
    #define _GUI_
        
        class GUI : public NetworkClient
        {
            
            /**********************************************************************************************************************************************************************************************************/
            /********************************************************************************************** CONSTRUCTORS **********************************************************************************************/
            /**********************************************************************************************************************************************************************************************************/
            
                /** DOCUMENTATION **/
                // Constructor initializing the GUI as a network interface
                
                /** CODE **/
                public : GUI (string address, int port) : NetworkClient(address, port)
                {
                    
                    // Information
                    Shell::getInstance().info("Creating interface to communicate with GUI");
                    
                }
            
            /**********************************************************************************************************************************************************************************************************/
            /*********************************************************************************************** DESTRUCTOR ***********************************************************************************************/
            /**********************************************************************************************************************************************************************************************************/
                
                /** DOCUMENTATION **/
                // Default destructor
                
                /** CODE **/
                public : virtual ~GUI ()
                {}
                
            /**********************************************************************************************************************************************************************************************************/
            /************************************************************************************************* METHODS ************************************************************************************************/
            /**********************************************************************************************************************************************************************************************************/
                
                /** DOCUMENTATION **/
                // Connects to the GUI process
                
                /** CODE **/
                public : void establishConnection ()
                {
                    
                    // We overload the method to add a message
                    NetworkClient::establishConnection();
                    if (NetworkObject::isConnected())
                        Shell::getInstance().info("GUI is now connected");
                    else
                        Shell::getInstance().error("Could not connect to GUI");
                    
                }
                
            /**********************************************************************************************************************************************************************************************************/
                
                /** DOCUMENTATION **/
                // Sends the initial information to the GUI
                
                /** CODE **/
                public : void start (Maze* maze, vector<Player*> players)
                {

                    // We send the information in JSON style
                    TypeConverter converter;
                    string message = "{\"player1Name\": \"" + converter.toJSON(players[0]->getName()) + "\", "
                                    + "\"player1Location\": \"" + maze->getNiceCurrentPlayerLocation(players[0]) + "\", "
                                    + (players.size() == 1 ? "" : "\"player2Name\": \"" + converter.toJSON(players[1]->getName()) + "\", ")
                                    + (players.size() == 1 ? "" : "\"player2Location\": \"" + maze->getNiceCurrentPlayerLocation(players[1]) + "\", ")
                                    + "\"mazeMap\": \"" + maze->mapToString() + "\", "
                                    + "\"mazeWidth\": \"" + to_string(maze->getWidth()) + "\", "
                                    + "\"mazeHeight\": \"" + to_string(maze->getHeight()) + "\", "
                                    + "\"piecesOfCheese\": \"" + maze->piecesOfCheeseToString() + "\"}";
                    NetworkObject::sendMessage(message);
                    
                }
                
            /**********************************************************************************************************************************************************************************************************/
                
                /** DOCUMENTATION **/
                // Sends the turn information to the GUI 
                
                /** CODE **/
                public : void update (Maze* maze, vector<Player*> players)
                {

                    // We send the information in JSON style
                    TypeConverter converter;
                    string message = "{\"player1Move\": \"" + players[0]->getMove() + "\", "
                                    + "\"player1MoveDuration\": \"" + to_string(maze->getPlayerCurrentCrossing(players[0])) + "\", "
                                    + "\"player1Score\": \"" + double_to_string(players[0]->getScore()) + "\", "
                                    + (players.size() == 1 ? "" : "\"player2Move\": \"" + players[1]->getMove() + "\", ")
                                    + (players.size() == 1 ? "" : "\"player2MoveDuration\": \"" + to_string(maze->getPlayerCurrentCrossing(players[1])) + "\", ")
                                    + (players.size() == 1 ? "" : "\"player2Score\": \"" + double_to_string(players[1]->getScore()) + "\", ")
                                    + "\"piecesOfCheese\": \"" + maze->piecesOfCheeseToString() + "\"}";
                    NetworkObject::sendMessage(message);
                    
                }
                
            /**********************************************************************************************************************************************************************************************************/
            /**********************************************************************************************************************************************************************************************************/
            
        };
        
    #endif

/**********************************************************************************************************************************************************************************************************************************/
/**********************************************************************************************************************************************************************************************************************************/
